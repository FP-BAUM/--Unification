Reduce a function with mutiple equations to a function with only an equation

-- If we have a function f with mutiple equations:

f args1 = body1                           
...
f argsN = bodyN
---

-- We obtain the maximum argument's count

-- REPORT:

M := max(length(args1), ..., length(argsN))

-- 
# IF M > 0:
 
f = \ x1 ... xM ->
      case tuple{M} x1 ... xM of
        tuple{M} args1++(pad) -> body1
        ...
        tuple{M} argsN++(pad) -> bodyN
        
# IF M = 0:
f = body1 (+) ... (+) bodyN


--------------------------- Desugar mutual recursive let algorithm ---------------------------

1) Let de variable no recursivo.

   let x = A in B
   ===>
   (\x.B)A

      
2) Lambda cuyos parámetros son patrones.

   -- Con un solo patrón:
   \ p . A
   ===>
   \ x . fresh y1...ym. (x==p), A


   -- Con varios patrones:
   \ p1 ... pn . A
   ===>
   \ x1 ... xn . fresh y1...ym. (x1==p1),...,(xn==pn),A
   
   x1,...,xn son variables frescas
   y1,...,ym son las variables libres de p1...pn
   
3) Let de función no recursiva.

   let f p1 ... pn = A in B
   ===>
   let f = (\p1...pn.A) in B   (se reduce al caso 1)

 4) Let de varias funciones mutuamente recursivas  

    let f1 = A1
        ...
        fn = An
    in B   
    ===>
    let {R} = fix {R}.
                fresh f1 ... fn.
                  ({R} == {Tuple} f1 ... fn) , {Tuple} A1 ... An
      in
        fresh f1 ... fn.
          ({R} == ({Tuple} f1 ... fn)) , B

--------------------------- Desugar Case of ---------------------------

case e of
  p1 -> b1
  ...
  pN -> bN

Should be transformed to:

(\ x ->   fresh Y1 in ((x == p1); b1)
        + ...
        + fresh Yn in ((x == pN); bN))
    e

Where Y_i are the free variables of p_i
