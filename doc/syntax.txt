
-------------------------------------------------------------
-------------------------------------------------------------

Module syntax:

  module A.B.C where        -- export all from A.B.C
  module A.B.C(a; b) where  -- export selected names from A.B.C

  import A.B.C                  -- import all from A.B.C
  import A.B.C as D             -- import all from A.B.C
                                -- and declare alias D for A.B.C
  import A.B.C(a; b as bb)      -- import selected names from A
  import A.B.C(a; b as bb) as D -- import selected names from A.B.C
                                -- and declare alias D for A.B.C

To use qualified imports, do:

  import A.B.C()
  ... A.B.C.a ...

or

  import A.B.C() as D
  ... D.a ...

-------------------------------------------------------------
-- GRAMMAR
-------------------------------------------------------------

<program> ::= MODULE <qname> <moduleExports> WHERE
                LBRACE <moduleImports> <declaration*> RBRACE

<qname> ::= ID
          | ID DOT <qname>

-------------------------------------------------------------

<moduleExports> ::= /*EMPTY*/              /* Export all names */
                  | LPAREN <id*> RPAREN    /* Export selected names */

<id*> ::= /*EMPTY*/
        | ID SEMICOLON <id+> 

<id+> ::= ID
        | ID SEMICOLON <id+>

-------------------------------------------------------------

<moduleImports> ::= /*EMPTY*/                   /* Import all public names */
                  | LPAREN <renaming*> RPAREN   /* Import selected names */

<renaming*> ::= /*EMPTY*/
              | <renaming> SEMICOLON <renaming+> 

<renaming+> ::= <renaming>
              | <renaming> SEMICOLON <renaming+>

<renaming> ::= ID
             | ID AS ID

-------------------------------------------------------------

<declaration*> ::= /*EMPTY*/
                 | <declaration+>

<declaration+> ::= <declaration>
                 | <declaration> SEMICOLON <declaration+>

<declaration> ::=
    /* Import*/
  | IMPORT <qname> <moduleImports>
  | IMPORT <qname> <moduleImports> AS ID

    /* Fixity declaration */
    <fixity> INT ID
  |
    /* Data declaration */
    DATA <expr> WHERE LBRACE <typeSignatures~ RBRACE
  |
    /* Type declaration */
    TYPE <expr> EQ <expr>
  |
    /* Class declaration */
    CLASS <classname> <qname>
      WHERE LBRACE <typeSignatures> RBRACE
  |
    /* Instance declaration */
    INSTANCE <classname> <expr> <optionalConstraints>
      WHERE LBRACE <valueDeclarations> RBRACE
  |
    /* Type signature */
    <typeSignature>
  |
    /* Value declaration */
    <valueDeclaration>

<fixity> ::= INFIXL | INFIXR | INFIX

----

<typeSignature*> ::= /* EMPTY */
                   | <typeSignature+>

<typeSignature+> ::= <typeSignature>
                   | <typeSignature> SEMICOLON <typeSignatures+>

<typeSignature> ::= ID COLON <expr> <optionalConstraints>

----

<valueDeclaration*> ::= /* EMPTY */
                      | <valueDeclaration+>

<valueDeclaration+> ::= <valueDeclaration>
                      | <valueDeclaration> SEMICOLON <valueDeclaration+>

<valueDeclaration> ::= <expr> EQ <expr>

---

<optionalConstraints> ::= /* EMPTY */
                        | LBRACE <constraint*> RBRACE

<constraint*> ::= /* EMPTY */
                 | <constraint+>

<constraint+> ::= <constraint>
                | <constraint> SEMICOLON <constraint+>

<constraint> ::= <classname> <qname>

<classname> ::= <qname>

---

<expr> ::= <atom>
         | <atom> <expr>

<atom> ::= <qname>
         | INT
         | LPAREN <expr> RPAREN
         | LET LBRACE <declaration*> RBRACE IN <expr>
         | LAMBDA <id*> ARROW <expr>
         | LAMBDA LBRACE <branch*> RBRACE
         | CASE <expr> OF LBRACE <branch*> RBRACE

<id*> ::= /* EMPTY */
        | <id> <id*>

<branch*> ::= /* EMPTY */
            | <branch+>

<branch+> ::= <branch>
            | <branch> SEMICOLON <branch+>

<branch> ::= <expr*> ARROW <expr>

<expr*> ::= /* EMPTY */
          | <expr> <expr*>

